// src/vite/get-virtual-routes.ts
var VIRTUAL_ROUTES_DIR = "vite/virtual-routes/routes";
var VIRTUAL_ROUTES_ROUTES_DIR_PARTS = [
  "vite",
  "virtual-routes",
  "routes"
];
var VIRTUAL_ROUTES_DIR_PARTS = ["vite", "virtual-routes"];
function getVirtualRoutesPath(pathParts, forFile) {
  const basePath = new URL("../", import.meta.url);
  const virtualRoutesPath = pathParts.reduce((working, dirPart) => {
    return new URL(`${dirPart}/`, working);
  }, basePath);
  return new URL(forFile, virtualRoutesPath).pathname.replace(
    /^\/[a-zA-Z]:\//,
    "/"
  );
}
async function getVirtualRoutesV3() {
  return {
    routes: [
      {
        id: `${VIRTUAL_ROUTES_DIR}/graphiql`,
        path: "graphiql",
        file: getVirtualRoutesPath(
          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,
          "graphiql.jsx"
        ),
        index: false
      },
      {
        id: `${VIRTUAL_ROUTES_DIR}/subrequest-profiler`,
        path: "subrequest-profiler",
        file: getVirtualRoutesPath(
          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,
          "subrequest-profiler.jsx"
        ),
        index: false
      },
      {
        id: `${VIRTUAL_ROUTES_DIR}/index`,
        path: "",
        file: getVirtualRoutesPath(
          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,
          "index.jsx"
        ),
        index: true
      }
    ],
    layout: {
      file: getVirtualRoutesPath(VIRTUAL_ROUTES_DIR_PARTS, "layout.jsx")
    }
  };
}

// src/dev/hydrogen-routes.ts
async function hydrogenRoutes(currentRoutes) {
  if (process.env.NODE_ENV !== "development") {
    return currentRoutes;
  }
  const { layout, routes: virtualRoutes } = await getVirtualRoutesV3();
  const childVirtualRoutes = virtualRoutes.map(({ path, file, index, id }) => {
    return {
      file,
      id,
      index,
      path
    };
  });
  const virtualLayout = {
    file: layout.file,
    children: childVirtualRoutes
  };
  return [...currentRoutes, virtualLayout];
}
export {
  hydrogenRoutes
};
